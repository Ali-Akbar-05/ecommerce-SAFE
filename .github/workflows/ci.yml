name: CI

on:
  push:
    branches:
      - develop
      - main
      - devops/ci
  pull_request:
    branches:
      - develop
      - main
      - devops/ci

# https://docs.github.com/en/actions/using-workflows/about-workflows
jobs:

#  permissions:
#    contents: write
#    pull-requests: read

  build-test:
    # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
    # https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/
    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net#caching-dependencies
    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    # Note: `Ubuntu` file and folder names are case sensitive, be aware about naming them in solution references. because `Windows` file and folder names as case-insensitive.
    # prevent windows case-insensitive for our project with: git config core.ignorecase false; - https://stackoverflow.com/a/27139487/581476
    - name: Restore NuGet packages
      continue-on-error: false
      run: dotnet restore

    - name: Build
      continue-on-error: false
      run: dotnet build -c Release --no-restore

    # see here https://samlearnsazure.blog/2021/01/05/code-coverage-in-github-with-net-core/
    # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
    # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#filter-option-details
    # https://josef.codes/dotnet-core-filter-out-specific-test-projects-when-running-dotnet-test/
    # https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit
    # https://stackoverflow.com/questions/53255065/dotnet-unit-test-with-coverlet-how-to-get-coverage-for-entire-solution-and-not
    # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md
    - name: Run Unit Tests with Coverage
      continue-on-error: false
      id: unit-tests
      if: success()
      run: dotnet test -c Release --no-build --no-restore --filter "(Category=Unit&FullyQualifiedName~UnitTests&FullyQualifiedName~ECommerce.Services)"
           /p:Exclude=[BuildingBlocks.*]*%2c[ECommerce.Services.Shared]*  /p:CollectCoverage=true
           /p:CoverletOutputFormat=cobertura%2clcov /p:SkipAutoProps=true

    - name: Run Integration And EndToEnd Tests with Coverage
      continue-on-error: false
      id: integration-tests
      if: success()
      run: dotnet test -c Release --no-build --no-restore --filter "(Category=Integration&FullyQualifiedName~IntegrationTests&FullyQualifiedName~ECommerce.Services)|
            (Category=EndToEnd&FullyQualifiedName~EndToEndTests)" /p:Exclude=[BuildingBlocks.*]*%2c[ECommerce.Services.Shared]* /p:CollectCoverage=true
            /p:CoverletOutputFormat=cobertura%2clcov /p:SkipAutoProps=true

      # https://github.com/danielpalme/ReportGenerator
      # https://github.com/danielpalme/ReportGenerator-GitHub-Action
      # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
      # https://dotnetthoughts.net/generating-code-coverage-reports-in-dotnet-core/
      # https://docs.github.com/en/actions/learn-github-actions/expressions
      # https://stackoverflow.com/questions/57850553/github-actions-check-steps-status
      # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#steps-context
    - name: Generate Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.13
      id: generate-report
      if: (steps.unit-tests.outcome == 'success' && steps.integration-tests.outcome == 'success')
      with:
        reports: '${{ github.workspace }}/**/*.cobertura.xml'
        targetdir: '${{ github.workspace }}/tests/CoverageResults'
        reporttypes: 'Cobertura;lcov;MarkdownSummaryGithub;Html'

    # https://github.com/actions/runner/issues/946#issuecomment-900193569
    # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
    - name: Ls Report Output Files
      run: ls -la
      working-directory: ${{ github.workspace }}/tests/CoverageResults

    # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
    - name: Upload Test And Coverage Results Artifacts
      uses: actions/upload-artifact@v3
      continue-on-error: false
      if: steps.generate-report.outcome == 'success'
      with:
        name: test-results
        path: ${{ github.workspace }}/tests/CoverageResults

    - name: dotnet publish
      continue-on-error: false
      id: publish-services
      if: success()
      run: |
        dotnet publish -c Release --no-build --no-restore  ${{ github.workspace }}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api/ECommerce.Services.Catalogs.Api.csproj
        -o ${{ github.workspace }}/Services/Catalogs
        dotnet publish -c Release --no-build --no-restore  ${{ github.workspace }}/src/Services/Customers/ECommerce.Services.Customers.Api/ECommerce.Services.Customers.Api.csproj
        -o ${{ github.workspace }}/Services/Customers
        dotnet publish -c Release --no-build --no-restore  ${{ github.workspace }}/src/Services/Identity/ECommerce.Services.Identity.Api/ECommerce.Services.Identity.Api.csproj
        -o ${{ github.workspace }}/Services/Identity

    - name: Upload Services Publish Artifacts
      uses: actions/upload-artifact@v2
      if: steps.publish-services.outcome == 'success'
      with:
        name: publish-services-artifact
        path: ${{ github.workspace }}/Services

    # -  name: docker build
    #    run: |

  publish-test-result:
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/using-workflows/about-workflows#creating-dependent-jobs
    needs: build-test
    steps:
    # merging all coverage in a single coverage file and generating html files for downloading as artifacts
    - name: Publish coverage report to coveralls.io
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov:  '${{ github.workspace }}/tests/CoverageResults/lcov.info'
