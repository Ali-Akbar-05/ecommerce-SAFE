# Linting workflow: https://github.com/rhysd/actionlint

name: CI-CD

on:
  push:
    branches:
      - develop
      - main
      - preview
      - beta
      - devops/ci
      - fix/*
      - feat/*
    paths-ignore:
      - "readme.md"
    tags:
      - 'v*'
  pull_request:
    branches:
      - develop
      - main
      - preview
      - beta
    paths-ignore:
      - "readme.md"

  workflow_dispatch:
   inputs:
     logLevel:
       description: 'Log level'
       required: true
       default: 'warning'
       type: choice
       options:
         - info
         - warning
         - debug
     publish_docker:
       description: Publish docker-images?
       required: true
       default: true
       type: boolean
     publish_build_artifact:
       description: Publish build artifact?
       required: true
       default: true
       type: boolean

# https://docs.github.com/en/actions/learn-github-actions/variables#defining-environment-variables-for-a-single-workflow
# we could also define env in scope a job or step
env:
 REGISTRY: ghcr.io
 IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
 BRANCH_NAME: ${{ github.ref_name }}
 CATALOG_SVC_PATH: ${{ github.workspace }}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api/ECommerce.Services.Catalogs.Api.csproj
 CUSTOMERS_SVC_PATH: ${{ github.workspace }}/src/Services/Customers/ECommerce.Services.Customers.Api/ECommerce.Services.Customers.Api.csproj
 IDENTITY_SVC_PATH: ${{ github.workspace }}/src/Services/Identity/ECommerce.Services.Identity.Api/ECommerce.Services.Identity.Api.csproj

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

# https://docs.github.com/en/actions/using-workflows/about-workflows
jobs:

  # https://itnext.io/automate-your-integration-tests-and-semantic-releases-with-github-actions-43875ad83092
  # Skipping workflow runs for chore commits
  prepare:
     runs-on: ubuntu-latest
     if: (! contains(github.event.head_commit.message, '[skip ci]')) || (! contains(github.event.head_commit.message, 'chore'))
     steps:
       - run: echo "There is no chore commit message"

  build-test:
    needs: prepare
    # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3

    # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
    # https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/
    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net#caching-dependencies
    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget
        restore-keys: |
          ${{ runner.os }}-nuget

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    # Note: `Ubuntu` file and folder names are case sensitive, be aware about naming them in solution references. because `Windows` file and folder names as case-insensitive.
    # prevent windows case-insensitive for our project with: git config core.ignorecase false; - https://stackoverflow.com/a/27139487/581476
    - name: Restore NuGet packages
      continue-on-error: false
      if: success()
      run: dotnet restore

    - name: Build
      if: success()
      continue-on-error: false
      run: dotnet build -c Release --no-restore

    # see here https://samlearnsazure.blog/2021/01/05/code-coverage-in-github-with-net-core/
    # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
    # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#filter-option-details
    # https://josef.codes/dotnet-core-filter-out-specific-test-projects-when-running-dotnet-test/
    # https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit
    # https://stackoverflow.com/questions/53255065/dotnet-unit-test-with-coverlet-how-to-get-coverage-for-entire-solution-and-not
    # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md
    - name: Run Unit Tests with Coverage
      continue-on-error: false
      id: unit-tests
      if: success()
      run: dotnet test -c Release --no-build --no-restore --filter "(Category=Unit&FullyQualifiedName~UnitTests&FullyQualifiedName~ECommerce.Services)"
           /p:Exclude=[BuildingBlocks.*]*%2c[ECommerce.Services.Shared]*  /p:CollectCoverage=true
           /p:CoverletOutputFormat=cobertura%2clcov /p:SkipAutoProps=true

#    - name: Run Integration And EndToEnd Tests with Coverage
#      continue-on-error: false
#      id: integration-tests
#      if: success()
#      run: dotnet test -c Release --no-build --no-restore --filter "(Category=Integration&FullyQualifiedName~IntegrationTests&FullyQualifiedName~ECommerce.Services)|
#            (Category=EndToEnd&FullyQualifiedName~EndToEndTests)" /p:Exclude=[BuildingBlocks.*]*%2c[ECommerce.Services.Shared]* /p:CollectCoverage=true
#            /p:CoverletOutputFormat=cobertura%2clcov /p:SkipAutoProps=true

      # https://github.com/danielpalme/ReportGenerator
      # https://github.com/danielpalme/ReportGenerator-GitHub-Action
      # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
      # https://dotnetthoughts.net/generating-code-coverage-reports-in-dotnet-core/
      # https://docs.github.com/en/actions/learn-github-actions/expressions
      # https://stackoverflow.com/questions/57850553/github-actions-check-steps-status
      # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#steps-context
    - name: Generate Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.13
      id: generate-report
      # if: (steps.unit-tests.outcome == 'success' && steps.integration-tests.outcome == 'success')
      with:
        reports: '${{ github.workspace }}/**/*.cobertura.xml'
        targetdir: '${{ github.workspace }}/output/test-results'
        reporttypes: 'Cobertura;lcov;MarkdownSummaryGithub;Html'

    # https://unix.stackexchange.com/questions/57013/zip-all-files-in-directory
    # https://limeii.github.io/2022/11/deploy-to-azure-appservice-with-github-actions/
    # # https://stackoverflow.com/questions/68470162/how-to-archive-files-in-artifact-for-github-workflow-actions-in-order-to-fix-thi
    - name: Zip test-results Artifacts
      run: |
          zip -r ${{ github.workspace }}/output/test-results.zip ${{ github.workspace }}/output/test-results/

      # https://github.com/actions/runner/issues/946#issuecomment-900193569
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
    - name: Ls Report Output Files
      if: success()
      run: ls -R
      working-directory: ${{ github.workspace }}/output/test-results

    # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
    # https://github.blog/changelog/2020-10-08-github-actions-ability-to-change-retention-days-for-artifacts-and-logs/
    # https://github.com/actions/upload-artifact#upload-an-entire-directory
    - name: Upload Test And Coverage Results Artifacts
      uses: actions/upload-artifact@v3
      continue-on-error: false
      if: steps.generate-report.outcome == 'success'
      with:
        name: build-test-artifacts
        retention-days: 5
        path: |
            ${{ github.workspace }}/output/test-results.zip

  # https://docs.github.com/en/actions/deployment/about-deployments/deploying-with-github-actions
  # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
  # https://www.trywilco.com/post/wilco-ci-cd-github-heroku
  # https://limeii.github.io/2022/11/deploy-to-azure-appservice-with-github-actions/
  # https://limeii.github.io/2022/11/deploy-on-multiple-environment-with-github-actions/
  release-development:
    if: ${{ contains(fromJson('["develop", "devops/ci"]'), github.ref_name) && github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/using-workflows/about-workflows#creating-dependent-jobs
    needs: build-test

    # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
    environment:
      name: development
      # url: ${ {  steps.deploy-to-heroku.outputs.webapp-url  } }

    # https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
    # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio
    permissions:
      contents: write #  to be able to publish a GitHub release
      issues: write #  to be able to comment on released issues
      pull-requests: write #  to be able to comment on released pull requests

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 'lts/*'

    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        key: Linux-nuget
        path: ~/.nuget/packages

      # https://github.com/actions/download-artifact#download-all-artifacts
      # download artifacts without name will download all artifacts
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

      # https://askubuntu.com/questions/86849/how-to-unzip-a-zip-file-from-the-terminal
    - name: unzip artifacts
      run: |
          mkdir  "${{ github.workspace }}/output"
          ls "${{ github.workspace }}"
          unzip ${{ github.workspace }}/artifacts/build-test-artifacts/test-results.zip -d /output

    - name: Ls Report Output Files
      if: success()
      run: ls -R
      working-directory: ${{ github.workspace }}/output/

    # merging all coverage in a single coverage file and generating html files for downloading as artifacts
    - name: Publish coverage report to coveralls.io
      if: success()
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: ${{ github.workspace }}/output/test-results/lcov.info

    # https://thecodinganalyst.github.io/knowledgebase/Basic-guide-to-Semantic-Release/
    # https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b
    # https://github.com/michael-wolfenden/Cake.Npx/blob/master/src/Cake.Npx.Tests/NpxAliasesTests.cs#L59
    # https://medium.com/@michael.wolfenden/simplified-versioning-and-publishing-for-net-libraries-a28e5e740fa6
    # https://github.com/semantic-release/semantic-release/issues/753#issuecomment-706971174
    # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions
    # will assmblies versions and push them to git
    - name: Semantic Release
      id: semantic
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # because of using none default (conventionalcommits) `preset` for `semantic-release`, we should add dependency `conventional-changelog-conventionalcommits`
      run: npx -p conventional-changelog-conventionalcommits -p @semantic-release/git -p @semantic-release/changelog -p @semantic-release/exec  semantic-release

    - name: Semantic Release Outputs
      run: |
        echo ${{ steps.semantic.outputs.semantic-nextRelease-version }}
        echo ${{ steps.semantic.outputs.semantic-nextRelease-channel }}
        echo ${{ steps.semantic.outputs.semantic-nextRelease-gitTag }}
        echo ${{ steps.semantic.outputs.semantic-lastRelease-version }}
        echo ${{ steps.semantic.outputs.semantic-lastRelease-channel }}
        echo ${{ steps.semantic.outputs.semantic-lastRelease-gitTag }}

    - name: Restore NuGet packages
      continue-on-error: false
      if: ${{ inputs.publish_build_artifact }}
      run: dotnet restore

     # https://garywoodfine.com/how-to-use-github-actions-to-build-deploy-github-nuget-packages/
     # https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-7.0#the-dockerfile
     # or calling dotnet publish on solution - we marked `publishable` and `packable` projects in their .csproj
    - name: dotnet publish
      continue-on-error: false
      id: publish-services
      if: (success()  && ${{ inputs.publish_build_artifact }})
      run: |
        dotnet publish -c Release --no-restore  ${{ env.CATALOG_SVC_PATH }} -o ${{ github.workspace }}/output/Services/Catalogs /p:Version=${{ steps.semantic.outputs.semantic-nextRelease-version }} /p:AssemblyVersion=${{ steps.semantic.outputs.semantic-nextRelease-version }} /p:InformationalVersion=${{ steps.semantic.outputs.semantic-nextRelease-version }}
        dotnet publish -c Release --no-restore  ${{ env.CUSTOMERS_SVC_PATH }}  -o ${{ github.workspace }}/output/Services/Customers /p:Version=${{ steps.semantic.outputs.semantic-nextRelease-version }} /p:AssemblyVersion=${{ steps.semantic.outputs.semantic-nextRelease-version }} /p:InformationalVersion=${{ steps.semantic.outputs.semantic-nextRelease-version }}
        dotnet publish -c Release --no-restore  ${{ env.IDENTITY_SVC_PATH }} -o ${{ github.workspace }}/output/Services/Identity /p:Version=${{ steps.semantic.outputs.semantic-nextRelease-version }} /p:AssemblyVersion=${{ steps.semantic.outputs.semantic-nextRelease-version }} /p:InformationalVersion=${{ steps.semantic.outputs.semantic-nextRelease-version }}

    - name: Zip publish-services Artifacts
      run: |
        cd ${{ github.workspace }}/output/Services
        zip -r publish-services.zip ./*

    - name: Upload Publish Services Artifacts For Deployment Jobs
      uses: actions/upload-artifact@v3
      if: (steps.publish-services.outcome == 'success' && ${{ inputs.publish_build_artifact }})
      with:
        name: publish-services
        retention-days: 1
        path: |
          ${{ github.workspace }}/output/Services/publish-services.zip

      # https://docs.docker.com/engine/reference/commandline/build/
      # https://dev.to/willvelida/pushing-container-images-to-github-container-registry-with-github-actions-1m6b
      # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio
    -  name: docker build
       if: ${{ inputs.publish_docker }}
       run: |
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/catalogs-service:${{ steps.semantic.outputs.semantic-nextRelease-version }}  -f "${{ github.workspace }}/src/Services/Catalogs/Dockerfile"
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/customers-service:${{ steps.semantic.outputs.semantic-nextRelease-version }} -f "${{ github.workspace }}/src/Services/Customers/Dockerfile"
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/identity-service:${{ steps.semantic.outputs.semantic-nextRelease-version }}  -f "${{ github.workspace }}/src/Services/Identity/Dockerfile"

    - name: 'Login to GitHub Container Registry'
      uses: docker/login-action@v1
      if: (success() && ${{ inputs.publish_docker }})
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{github.actor}}
        password: ${{secrets.GITHUB_TOKEN}}

    - name: docker publish
      if: (success() && ${{ inputs.publish_docker }})
      run: |
        docker push   ghcr.io/${{ github.repository }}/catalogs-service:${{ steps.semantic.outputs.semantic-nextRelease-version }}
        docker push   ghcr.io/${{ github.repository }}/customers-service:${{ steps.semantic.outputs.semantic-nextRelease-version }}
        docker push   ghcr.io/${{ github.repository }}/identity-service:${{ steps.semantic.outputs.semantic-nextRelease-version }}

#   release-production:
#     if: ${{ contains(fromJson('["main", "beta", "preview"]'), github.ref_name) }}
#     runs-on: ubuntu-latest
#     # https://docs.github.com/en/actions/using-workflows/about-workflows#creating-dependent-jobs
#     needs: build-test
#     environment: production
#
#     steps:
#       # https://github.com/actions/download-artifact#download-all-artifacts
#       - name: Download Artifacts
#         uses: actions/download-artifact@v3
#         with:
#           path: artifacts
#
#       # merging all coverage in a single coverage file and generating html files for downloading as artifacts
#       - name: Publish coverage report to coveralls.io
#         uses: coverallsapp/github-action@master
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           path-to-lcov:  'artifacts/test-results/lcov.info'
#
#     # -  name: publish docker image
#     #    run: |
