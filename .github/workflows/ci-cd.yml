# Linting workflow: https://github.com/rhysd/actionlint

name: CI-CD

on:
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#push
  # Runs your workflow when you push a commit or tag.
  push:
    branches:
      - develop
      - main
      - preview
      - beta
      - devops/ci
      - fix/*
      - feat/*
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-affects-specific-files
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
    paths:
      - src/**
      - tests/**
      -  .github/**
  pull_request:
    branches:
      - develop
      - main
      - preview
      - beta
    # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#running-your-workflow-only-when-a-push-affects-specific-files
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
    paths:
      - src/**
      - tests/**
      - .github/**

  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#workflow_dispatch
  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onworkflow_dispatchinputs
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#providing-inputs
  # https://docs.github.com/en/actions/managing-workflow-runs/manually-running-a-workflow
  # Allows us to run this workflow manually from the Actions tab
  # To manually trigger a workflow, use the workflow_dispatch event. You can manually trigger a workflow run using the GitHub API, GitHub CLI, or GitHub browser interface
  workflow_dispatch:
   inputs:
     logLevel:
       description: 'Log level'
       required: true
       default: 'warning'
       type: choice
       options:
         - info
         - warning
         - debug
     environment:
       description: 'Environment to deploy'
       type: environment
       required: true
# https://docs.github.com/en/actions/learn-github-actions/variables#defining-environment-variables-for-a-single-workflow
# we could also define env in scope a job or step
env:
 REGISTRY: ghcr.io
 IS_PULL_REQUEST: ${{ github.event_name == 'pull_request' }}
 BRANCH_NAME: ${{ github.ref_name }}
 CATALOG_SVC_PATH: ${{ github.workspace }}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api/ECommerce.Services.Catalogs.Api.csproj
 CUSTOMERS_SVC_PATH: ${{ github.workspace }}/src/Services/Customers/ECommerce.Services.Customers.Api/ECommerce.Services.Customers.Api.csproj
 IDENTITY_SVC_PATH: ${{ github.workspace }}/src/Services/Identity/ECommerce.Services.Identity.Api/ECommerce.Services.Identity.Api.csproj

# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.sha }}
  cancel-in-progress: true

# https://docs.github.com/en/actions/using-workflows/about-workflows
jobs:

  # https://itnext.io/automate-your-integration-tests-and-semantic-releases-with-github-actions-43875ad83092
  # Skipping workflow runs for chore commits
  prepare:
     runs-on: ubuntu-latest
     if: (! contains(github.event.head_commit.message, '[skip ci]')) || (! contains(github.event.head_commit.message, 'chore'))
     steps:
       - run: echo "There is no chore commit message"

  build-test:
    needs: prepare

    # https://github.com/actions/runner-images/blob/main/images/linux/Ubuntu2204-Readme.md
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ubuntu-latest

    # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
    # Job outputs containing expressions are evaluated on the runner at the end of each job
    outputs:
      environment_name: ${{ steps.branch_check.outputs.environment_name }}
      environment_tag: ${{ steps.branch_check.outputs.environment_tag }}

    steps:

    # https://www.codewrecks.com/post/github/choose-environment-from-branch/
    # https://stackoverflow.com/questions/63117454/how-to-set-workflow-env-variables-depending-on-branch
    # https://hungvu.tech/advanced-github-actions-conditional-workflow
    - name: Set environment for branch
      id: branch_check
      run: |
        if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "environment_tag=" >> "$GITHUB_OUTPUT"
            echo "environment_name=production" >> "$GITHUB_OUTPUT"
        elif [[ $GITHUB_REF == 'refs/heads/develop' ]]; then
            echo "environment_tag=-dev" >> "$GITHUB_OUTPUT"
            echo "environment_name=staging" >> "$GITHUB_OUTPUT"
        elif [[ $GITHUB_REF == 'refs/heads/preview' ]]; then
            echo "environment_tag=-preview" >> "$GITHUB_OUTPUT"
            echo "environment_name=preview" >> "$GITHUB_OUTPUT"
        elif [[ $GITHUB_REF == 'refs/heads/beta' ]]; then
            echo "environment_tag=-beta" >> "$GITHUB_OUTPUT"
            echo "environment_name=preview" >> "$GITHUB_OUTPUT"
        else
            echo "environment_tag=-dev" >> "$GITHUB_OUTPUT"
            echo "environment_name=develop" >> "$GITHUB_OUTPUT"
        fi

    - name: Use variable setup in previous step
      run: |
        echo "I'm using environment: ${{ steps.branch_check.outputs.environment_name }}"
        echo "I'm using environment-tag: ${{ steps.branch_check.outputs.environment_tag }}"

      # https://docs.github.com/en/actions/learn-github-actions/contexts#github-context
      # The `default working directory` on the runner for `steps`, and the default location of your repository when using the checkout action
      # it is `defualt root path` if we don't specify a working directory
    - name: Ls default workspace for steps
      run: ls -R ${{ github.workspace }}

        # checkout store repository in default workspace for steps `{{ github.workspace }}`
    - name: Check out code
      uses: actions/checkout@v3

    # https://docs.github.com/en/actions/using-workflows/caching-dependencies-to-speed-up-workflows
    # https://devblogs.microsoft.com/dotnet/dotnet-loves-github-actions/
    # https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net#caching-dependencies
    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-dotnet-nuget

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    # Note: `Ubuntu` file and folder names are case sensitive, be aware about naming them in solution references. because `Windows` file and folder names as case-insensitive.
    # prevent windows case-insensitive for our project with: git config core.ignorecase false; - https://stackoverflow.com/a/27139487/581476
    - name: Restore NuGet packages
      continue-on-error: false
      if: success()
      run: dotnet restore

    - name: Build
      if: success()
      continue-on-error: false
      run: dotnet build -c Release --no-restore

    # see here https://samlearnsazure.blog/2021/01/05/code-coverage-in-github-with-net-core/
    # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
    # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#filter-option-details
    # https://josef.codes/dotnet-core-filter-out-specific-test-projects-when-running-dotnet-test/
    # https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit
    # https://stackoverflow.com/questions/53255065/dotnet-unit-test-with-coverlet-how-to-get-coverage-for-entire-solution-and-not
    # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md
    - name: Run Unit Tests with Coverage
      continue-on-error: false
      id: unit-tests
      if: success()
      run: dotnet test -c Release --no-build --no-restore --filter "(Category=Unit&FullyQualifiedName~UnitTests&FullyQualifiedName~ECommerce.Services)"
           /p:Exclude=[BuildingBlocks.*]*%2c[ECommerce.Services.Shared]*  /p:CollectCoverage=true
           /p:CoverletOutputFormat=cobertura%2clcov /p:SkipAutoProps=true

#    - name: Run Integration And EndToEnd Tests with Coverage
#      continue-on-error: false
#      id: integration-tests
#      if: success()
#      run: dotnet test -c Release --no-build --no-restore --filter "(Category=Integration&FullyQualifiedName~IntegrationTests&FullyQualifiedName~ECommerce.Services)|
#            (Category=EndToEnd&FullyQualifiedName~EndToEndTests)" /p:Exclude=[BuildingBlocks.*]*%2c[ECommerce.Services.Shared]* /p:CollectCoverage=true
#            /p:CoverletOutputFormat=cobertura%2clcov /p:SkipAutoProps=true

      # https://github.com/danielpalme/ReportGenerator
      # https://github.com/danielpalme/ReportGenerator-GitHub-Action
      # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
      # https://dotnetthoughts.net/generating-code-coverage-reports-in-dotnet-core/
      # https://docs.github.com/en/actions/learn-github-actions/expressions
      # https://stackoverflow.com/questions/57850553/github-actions-check-steps-status
      # https://docs.github.com/en/actions/reference/context-and-expression-syntax-for-github-actions#steps-context
    - name: Generate Report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.1.13
      id: generate-report
      # if: (steps.unit-tests.outcome == 'success' && steps.integration-tests.outcome == 'success')
      with:
        reports: '${{ github.workspace }}/**/*.cobertura.xml'
        targetdir: '${{ github.workspace }}/output/test-results'
        reporttypes: 'Cobertura;lcov;MarkdownSummaryGithub;Html'

    # https://unix.stackexchange.com/questions/57013/zip-all-files-in-directory
    # https://limeii.github.io/2022/11/deploy-to-azure-appservice-with-github-actions/
    # https://stackoverflow.com/questions/68470162/how-to-archive-files-in-artifact-for-github-workflow-actions-in-order-to-fix-thi
    # note: we should zip inner (test-results) folder and for doing this we use  `cd output` first then zip
    # `test-results/*` folder, otherwise with zip `output/test-results` it zip output folder and inner `test-results`folder together
    - name: Zip test-results Artifacts
      run: |
          cd output
          zip -r test-results.zip test-results/*

      # https://github.com/actions/runner/issues/946#issuecomment-900193569
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
    - name: Ls Output Files
      if: success()
      run: ls -R
      working-directory: ${{ github.workspace }}/output

    # https://docs.github.com/en/actions/using-workflows/storing-workflow-data-as-artifacts
    # https://github.blog/changelog/2020-10-08-github-actions-ability-to-change-retention-days-for-artifacts-and-logs/
    # https://github.com/actions/upload-artifact#upload-an-entire-directory
    - name: Upload Test And Coverage Results Artifacts
      uses: actions/upload-artifact@v3
      continue-on-error: false
      if: steps.generate-report.outcome == 'success'
      with:
        name: build-test-artifacts
        retention-days: 5
        path: |
              output/test-results.zip

  # https://docs.github.com/en/actions/deployment/about-deployments/deploying-with-github-actions
  # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
  # https://www.trywilco.com/post/wilco-ci-cd-github-heroku
  # https://limeii.github.io/2022/11/deploy-to-azure-appservice-with-github-actions/
  # https://limeii.github.io/2022/11/deploy-on-multiple-environment-with-github-actions/
  release:
    # https://docs.github.com/en/actions/using-workflows/about-workflows#creating-dependent-jobs
    needs: build-test

    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#calling-a-reusable-workflow
    name: calling-deployment
    uses:  ./.github/workflows/reusable-deploy.yml
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#passing-inputs-and-secrets-to-a-reusable-workflow
    with:
      environment_name: ${{ needs.build-test.outputs.environment_name }}
      environment_tag: ${{ needs.build-test.outputs.environment_tag }}
    secrets:
      token: ${{ github.token }}


