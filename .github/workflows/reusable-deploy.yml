name: Reusable Deployment Workflow

on:
  workflow_call:
    inputs:
      environment_name:
        type: string
        description: environment to deploy to
        required: true
      release_version:
        type: string
        description: version
        required: true

jobs:

  deploy:
    name: Deploy to ${{ inputs.environment_name }} Environment
    runs-on: ubuntu-latest
    #https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstrategyfail-fast
    continue-on-error: false

    # https://docs.github.com/en/actions/learn-github-actions/variables#defining-environment-variables-for-a-single-workflow
    # https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations
    # https://docs.github.com/en/actions/learn-github-actions/variables
    # Any environment variables set in an env context defined at the workflow level in the caller workflow are not propagated to the called workflow
    env:
      REGISTRY: ghcr.io
      CATALOG_SVC_PATH: ${{ github.workspace }}/src/Services/Catalogs/ECommerce.Services.Catalogs.Api/ECommerce.Services.Catalogs.Api.csproj
      CUSTOMERS_SVC_PATH: ${{ github.workspace }}/src/Services/Customers/ECommerce.Services.Customers.Api/ECommerce.Services.Customers.Api.csproj
      IDENTITY_SVC_PATH: ${{ github.workspace }}/src/Services/Identity/ECommerce.Services.Identity.Api/ECommerce.Services.Identity.Api.csproj

      # https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment
    environment:
      name: ${{ inputs.environment_name }}
      # url: ${{ steps.deploy-to-heroku.outputs.webapp-url }}

    steps:

    # https://docs.github.com/en/actions/learn-github-actions/variables#using-contexts-to-access-variable-values
    - name: Job Info
      run: |
        echo "job name is: ${{ github.job }}"
        echo "branch name is: ${{ github.ref_name }}"
        echo "environment_name is: ${{ inputs.environment_name }}"
        echo "version is: ${{ inputs.release_version }}"

    - name: Check Inputs
      run: |
        if [ -z ${{ inputs.release_version }} ]
           then echo "version is empty, action cancelled..."
                exit 1
        fi
        if [ -z ${{ inputs.environment_name }} ]
           then echo "environment_name is empty, action cancelled..."
                exit 1
        fi

      # https://github.com/actions/checkout#push-a-commit-using-the-built-in-token
      # https://stackoverflow.com/questions/750172/how-do-i-change-the-author-and-committer-name-email-for-multiple-commits
      # https://github.com/orgs/community/discussions/26560
      ## https://github.com/actions/checkout/issues/439#issuecomment-965968956
      # By default checkout@v3, will check branch on ref/SHA that triggered in starting workflow, so if inner a job in the workflow we change HEAD of repository by changing code, subsequent jobs don't get these commits and they get ref/SHA that triggered in starting workflow
    - name: Checkout Repository
      uses: actions/checkout@v3
      with:
        # https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
        # Only a single commit is fetched by default, for the ref/SHA that triggered the workflow. Set fetch-depth: 0 to fetch all history for all branches and tags
        fetch-depth: 0
        ref: ${{ github.ref_name }}
    - run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Setup .NET
      uses: actions/setup-dotnet@v3

    - name: Cache NuGet Packages
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-dotnet-nuget
        path: ~/.nuget/packages

    - name: create output dir
      run: mkdir  "output"

      # https://github.com/actions/download-artifact#download-all-artifacts
      # download artifacts without name will download all artifacts
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: dir
      run: ls -R "${{ github.workspace }}/artifacts/build-test-artifacts"

      # https://askubuntu.com/questions/86849/how-to-unzip-a-zip-file-from-the-terminal
    - name: unzip artifacts
      run: |
        unzip "artifacts/build-test-artifacts/test-results.zip" -d "output"

    - name: Ls Output Files
      if: success()
      run: ls -R ${{ github.workspace }}/output

    # merging all coverage in a single coverage file and generating html files for downloading as artifacts
    - name: Publish coverage report to coveralls.io
      if: success()
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: "output/test-results/lcov.info"

    - name: Restore NuGet packages
      if: success()
      run: dotnet restore

    # https://garywoodfine.com/how-to-use-github-actions-to-build-deploy-github-nuget-packages/
    # https://learn.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-7.0#the-dockerfile
    # or calling dotnet publish on solution - we marked `publishable` and `packable` projects in their .csproj
    - name: dotnet publish
      id: publish-services
      if: success()
      run: |
        dotnet publish -c Release --no-restore  ${{ env.CATALOG_SVC_PATH }} -o ${{ github.workspace }}/output/publish-services/Catalogs /p:Version=${{ inputs.release_version }} /p:InformationalVersion=${{ inputs.release_version }} /p:ApplicationVersion=${{ inputs.release_version }}
        dotnet publish -c Release --no-restore  ${{ env.CUSTOMERS_SVC_PATH }}  -o ${{ github.workspace }}/output/publish-services/Customers /p:Version=${{ inputs.release_version }} /p:InformationalVersion=${{ inputs.release_version }} /p:ApplicationVersion=${{ inputs.release_version }}
        dotnet publish -c Release --no-restore  ${{ env.IDENTITY_SVC_PATH }} -o ${{ github.workspace }}/output/publish-services/Identity /p:Version=${{ inputs.release_version }} /p:InformationalVersion=${{ inputs.release_version }} /p:ApplicationVersion=${{ inputs.release_version }}

      # https://unix.stackexchange.com/questions/57013/zip-all-files-in-directory
      # https://limeii.github.io/2022/11/deploy-to-azure-appservice-with-github-actions/
      # https://stackoverflow.com/questions/68470162/how-to-archive-files-in-artifact-for-github-workflow-actions-in-order-to-fix-thi
      # note: we should zip inner (publish-services) folder and for doing this we use  `cd output` first then zip
      # `publish-services/*` folder, otherwise with zip `output/publish-services` it zip output folder and inner `publish-services`folder together
    - name: Zip publish-services Artifacts
      if: success()
      run: |
        cd output
        zip -r publish-services.zip publish-services/*

      # https://github.com/actions/runner/issues/946#issuecomment-900193569
      # https://docs.github.com/en/actions/learn-github-actions/contexts#steps-context
    - name: Ls Output Files
      if: success()
      run: ls -R
      working-directory: ${{ github.workspace }}/output

    - name: Upload Publish Services Artifacts For Deployment Jobs
      uses: actions/upload-artifact@v3
      if: (steps.publish-services.outcome == 'success')
      with:
        name: publish-services
        retention-days: 1
        path: |
          output/publish-services.zip

      # https://blog.derlin.ch/github-actions-reusable-workflow-docker-images
    - name: Lint Dockerfile using Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile # only ask for dockerfile scans
        quiet: true # show only failed checks
        container_user: 1000 # UID to run the container under

      # https://docs.docker.com/engine/reference/commandline/build/
      # https://dev.to/willvelida/pushing-container-images-to-github-container-registry-with-github-actions-1m6b
      # https://docs.github.com/en/packages/managing-github-packages-using-github-actions-workflows/publishing-and-installing-a-package-with-github-actions#upgrading-a-workflow-that-accesses-ghcrio
    -  name: docker build
       if: success()
       run: |
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/catalogs-service:${{ inputs.release_version }}  -f "${{ github.workspace }}/src/Services/Catalogs/Dockerfile"
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/customers-service:${{ inputs.release_version }} -f "${{ github.workspace }}/src/Services/Customers/Dockerfile"
         docker build . --tag  ${{ env.REGISTRY }}/${{ github.repository }}/identity-service:${{ inputs.release_version }}  -f "${{ github.workspace }}/src/Services/Identity/Dockerfile"

    - name: 'Login to GitHub Container Registry'
      uses: docker/login-action@v1
      if: success()
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: docker publish
      if: success()
      run: |
        docker push   ${{ env.REGISTRY }}/${{ github.repository }}/catalogs-service:${{ inputs.release_version }}
        docker push   ${{ env.REGISTRY }}/${{ github.repository }}/customers-service:${{ inputs.release_version }}
        docker push   ${{ env.REGISTRY }}/${{ github.repository }}/identity-service:${{ inputs.release_version }}
