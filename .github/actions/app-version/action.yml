# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
# https://doug.sh/posts/using-composite-actions-with-github-actions/
# https://wallis.dev/blog/composite-github-actions

name: "App Version"
description: "Update App Version"

# Input parameters allow you to specify data that the action expects to use during runtime. GitHub stores input parameters as environment variables.(so they are just string)
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  # https://stackoverflow.com/questions/70098241/using-secrets-in-composite-actions-github
  token:
    description: A Github PAT
    required: true
  service-name:
    description: Service name
    required: true
  supported-branches:
    description: Supported Branches to generate version
    default: '["main", "develop", "beta", "preview", "devops/ci"]'

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputsoutput_idvalue
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#outputs-for-composite-actions
outputs:
  application-version:
    value: ${{ env.APP_VERSION }}
    description: "Application Version"

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 'lts/*'

    - name: Check Inputs
      shell: bash
      if: ${{ !contains(fromJson(inputs.supported-branches), github.ref_name) }}
      run: |
            echo "branch ${{ github.ref_name }} is not valid for generating version, action cancelled..."
            exit 1

    - name: Set branch name as env variable
      shell: bash
      run: |
        if [ ${{ github.event_name }} = 'workflow_run' ]; then
           echo "BRANCH=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_ENV
        else
           echo "BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
        fi

    # https://github.com/semantic-release/semantic-release/discussions/2674
    # https://medium.com/@michael.wolfenden/simplified-versioning-and-publishing-for-net-libraries-a28e5e740fa6
    # https://github.com/semantic-release/semantic-release/issues/753
    # https://github.com/semantic-release/semantic-release/issues/1647
    # https://semantic-release.gitbook.io/semantic-release/usage/plugins
    # https://semantic-release.gitbook.io/semantic-release/usage/configuration#dryrun
    # https://github.com/semantic-release/semantic-release/issues/2704
    # https://github.com/semantic-release/semantic-release/issues/2703
    - name: Semantic Release Version
      id: semantic-version
      if: ${{ success() }}
      shell: bash
      env:
        GITHUB_TOKEN:  ${{ inputs.token }}
        GIT_AUTHOR_NAME: github-actions[bot]
        GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
        GIT_COMMITTER_NAME: github-actions[bot]
        GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
      # because of using none default (conventionalcommits) `preset` for `semantic-release`, we should add dependency `conventional-changelog-conventionalcommits`
      # using dry-run here for preventing publish release note and just calculate version
      run: |
        echo "running semantic-release in dry-run mode"
        npx  -p conventional-changelog-conventionalcommits -p @semantic-release/git -p  @semantic-release/changelog -p @semantic-release/exec -p @saithodev/semantic-release-backmerge  semantic-release  --dry-run

      # https://stackoverflow.com/questions/69043259/how-can-i-cancel-a-github-actions-workflow-if-the-commit-has-no-tag
    - name: Semantic Release Versions Outputs
      shell: bash
      if: success()
      run: |
          echo ${{ steps.semantic-version.outputs.semantic_nextRelease_version }}
          echo ${{ steps.semantic-version.outputs.semantic_nextRelease_channel }}
          echo ${{ steps.semantic-version.outputs.semantic_nextRelease_gitTag }}
          echo ${{ steps.semantic-version.outputs.semantic_lastRelease_version }}
          echo ${{ steps.semantic-version.outputs.semantic_lastRelease_channel }}
          echo ${{ steps.semantic-version.outputs.semantic_lastRelease_gitTag }}

    - name: Set Application Version
      id: app-version-step
      shell: bash
      if: success()
      # https://gist.github.com/rponte/fdc0724dd984088606b0
      # https://linuxhint.com/bash_if_else_examples/
      # https://github.com/semantic-release/semantic-release/issues/2703
      run: |
        if [ -z "${{ steps.semantic-version.outputs.semantic_nextRelease_version }}" ]; then
            if [ "${{ github.ref_name }}" = "develop" ]; then
               LATEST_TAG=$(git describe --abbrev=0 --tags --match "*dev*" | sed 's/^v//')
            elif [ "${{ github.ref_name }}" = "beta" ]; then
               LATEST_TAG=$(git describe --abbrev=0 --tags --match "*beta*" | sed 's/^v//')
            elif [ "${{ github.ref_name }}" = "preview" ]; then
               LATEST_TAG=$(git describe --abbrev=0 --tags --match "*preview*" | sed 's/^v//')
            else
               LATEST_TAG=$(git describe --abbrev=0 --tags --exclude "*dev*" --exclude "*beta*" --exclude "*preview*" --exclude "*ops*" | sed 's/^v//')
            fi
            echo "latest tag for ${{ github.ref_name }} branch is: $LATEST_TAG"
            echo "APP_VERSION=$LATEST_TAG" >> "$GITHUB_ENV"
            echo "app version is: $APP_VERSION"
        else
            echo "APP_VERSION=${{ steps.semantic-version.outputs.semantic_nextRelease_version }}" >> "$GITHUB_ENV"
        fi

    - name: csproj version
      shell: bash
      if: success()
      run: |
        echo update app version to $APP_VERSION
        ./update-version.sh "$APP_VERSION"

    - run: |
        git pull origin ${{ github.ref_name }}
      shell: bash

      # https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md
      # https://github.com/peter-evans/create-pull-request/blob/main/docs/examples.md
      # https://github.com/peter-evans/create-pull-request/issues/1608
    - name: Create Update Version Pull Request
      uses: peter-evans/create-pull-request@v4
      if: success() && steps.semantic-version.outputs.semantic_nextRelease_version != ''
      with:
        author: "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"
        commit-message: "chore(release): ⬆️ upgrading application version to: ${{ steps.semantic-version.outputs.semantic_nextRelease_version }} [skip ci]"
        title: "chore(release): ⬆️ upgrading application version to: ${{ steps.semantic-version.outputs.semantic_nextRelease_version }} [skip ci]"
        token: ${{ inputs.token }}
        delete-branch: true
        # https://github.com/peter-evans/create-pull-request#alternative-strategy---always-create-a-new-pull-request-branch
        # branch-suffix: timestamp
        assignees: mehdihadeli
        reviewers: mehdihadeli
        branch: upgrade-app-version-${{ steps.semantic-version.outputs.semantic_nextRelease_version }}
        labels: |
          chore
        # https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
        add-paths: |
          *.Packages.props

      # Save version in the artifacts to use in CD process
    - name: Save Version Name
      if: success()
      shell: bash
      run: echo "$APP_VERSION" > version_name.txt

    - name: Upload Version Artifact
      if: success()
      uses: actions/upload-artifact@v2
      with:
        name: ${{ inputs.service-name}}_version_artifacts
        path: version_name.txt

#      # https://github.com/semantic-release/semantic-release/discussions/2557
#      # https://github.com/semantic-release/github/issues/175
#      # this needs a PAT with write permission without doing pull request
#    - name: Commit Updated Application Version File
#      uses: stefanzweifel/git-auto-commit-action@v4
#      if: ${{ success() }}
#      with:
#        commit_message: 'chore(release): ⬆️ upgrading application version to: ${{ steps.semantic-version.outputs.semantic_nextRelease_version }} [skip ci]'
#        file_pattern: '**/Directory.Packages.props'
#        disable_globbing: true
#        # https://github.com/stefanzweifel/git-auto-commit-action#usage
#        commit_author: github-actions[bot] <github-actions[bot]@users.noreply.github.com> # defaults to author of the commit that triggered the run
#        commit_user_name: github-actions[bot] # defaults to "github-actions[bot]"
#        commit_user_email: github-actions[bot]@users.noreply.github.com # defaults to "41898282+github-actions[bot]@users.noreply.github.com"


