name: "Build-Test-Push"
description: "Builds and tests and pushing docker image to the registry"

# Input parameters allow you to specify data that the action expects to use during runtime. GitHub stores input parameters as environment variables.(so they are just string)
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  application-version:
    description: "The application version"
    required: true
  project-path:
    description: "Path to project to test e.g. Services/Catalog/Catalog.API"
    required: true
  tests-path:
    description: "Path to test project e.g. Services/Catalog/Catalog.UnitTests"
    required: true
  # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#filter-option-details
  unit-test-filter:
    description: "Filter to finding unit tests"
    required: true
  integration-test-filter:
    description: "Filter to finding integration tests"
    required: true
  # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md#filters
  exclude-coverage:
    description: "Exclude projects for generating coverage"
    required: true
  reports-path:
    description: "Test report path e.g /**/*.cobertura.xml"
    required: true
  reports-output-path:
    description: "Test report output path e.g /output/test-results"
    required: true

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:
    - name: Call Composite Action build-test
      uses: ./.github/actions/build-test
      id: build-test-step
      with:
        application-version: ${{ inputs.application-version }}
        project-path: ${{ inputs.project-path }}
        tests-path: ${{ inputs.tests-path }}
        unit-test-filter: ${{ inputs.unit-test-filter }}
        integration-test-filter: ${{ inputs.integration-test-filter }}
        exclude-coverage: ${{ inputs.exclude-coverage }}
        # wildcard search for files with the ".cobertura.xml" extension in all subdirectories of the current directory
        # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
        # https://stackoverflow.com/questions/53255065/dotnet-unit-test-with-coverlet-how-to-get-coverage-for-entire-solution-and-not
        reports-path: ${{ reports-path }}
        reports-output-path: ${{ reports-output-path }}
