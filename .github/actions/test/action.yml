# https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions
# https://doug.sh/posts/using-composite-actions-with-github-actions/
# https://wallis.dev/blog/composite-github-actions

name: "Test"
description: "Test service"

# Input parameters allow you to specify data that the action expects to use during runtime. GitHub stores input parameters as environment variables.(so they are just string)
# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs
inputs:
  tests-path:
    description: Path to test project e.g. Services/Catalog/Catalog.UnitTests
    required: true
  # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md#filters
  coverage-exclude:
    description: Coverage exclude filter
    default: "[BuildingBlocks.*]*%2c[ECommerce.Services.Shared]*"
  # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#filter-option-details
  unit-test-filter:
    description: Unit tests filter
    default: "(Category=Unit&FullyQualifiedName~UnitTests&FullyQualifiedName~ECommerce.Services)"
  integration-test-filter:
    description: Integration tests filter
    default: "(Category=Integration&FullyQualifiedName~IntegrationTests&FullyQualifiedName~ECommerce.Services)|(Category=EndToEnd&FullyQualifiedName~EndToEndTests)"
  reports-path:
    description: Test report path
    required: true
  reports-output-path:
    description: Test report output path
    required: true
  service-name:
    description: Service name
    required: true
  # https://stackoverflow.com/questions/70098241/using-secrets-in-composite-actions-github
  token:
    description: A Github PAT
    required: true
  no-restore:
    description: No restore nuget packages, but building tests because they don't build in the build composition action
    default: 'true'

# https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runs-for-composite-actions
runs:
  using: "composite"
  steps:

    # see here https://samlearnsazure.blog/2021/01/05/code-coverage-in-github-with-net-core/
    # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
    # https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-test#filter-option-details
    # https://josef.codes/dotnet-core-filter-out-specific-test-projects-when-running-dotnet-test/
    # https://learn.microsoft.com/en-us/dotnet/core/testing/selective-unit-tests?pivots=xunit
    # https://stackoverflow.com/questions/53255065/dotnet-unit-test-with-coverlet-how-to-get-coverage-for-entire-solution-and-not
    # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md
    # https://github.com/coverlet-coverage/coverlet/blob/master/Documentation/MSBuildIntegration.md#filters
    - name: Run Unit Tests with No Restore
      shell: bash
      if: ${{ success() && inputs.no-restore == true }}
      working-directory: ${{ inputs.tests-path }}
      # https://stackoverflow.com/questions/3779701/msbuild-error-msb1008-only-one-project-can-be-specified
      run: |
        for file in $(find . -name "*.csproj" -type f); do
          echo "Testing $file"
          dotnet test "$file" -c Release --no-restore -p:Exclude="${{ inputs.exclude-coverage }}" -p:CollectCoverage=true -p:CoverletOutputFormat="cobertura%2clcov" -p:SkipAutoProps=true --filter "${{ inputs.unit-test-filter }}" --logger "trx;LogFileName=test-results.trx"
        done

    - name: Run Unit Tests
      shell: bash
      if: ${{ success() && inputs.no-restore == false }}
      working-directory: ${{ inputs.tests-path }}
      # https://stackoverflow.com/questions/3779701/msbuild-error-msb1008-only-one-project-can-be-specified
      run: |
        for file in $(find . -name "*.csproj" -type f); do
          echo "Testing $file"
          dotnet test "$file" -c Release  -p:Exclude="${{ inputs.exclude-coverage }}" -p:CollectCoverage=true -p:CoverletOutputFormat="cobertura%2clcov" -p:SkipAutoProps=true --filter "${{ inputs.unit-test-filter }}" --logger "trx;LogFileName=test-results.trx"
        done

    - name: Run Integration And EndToEnd Tests with No Restore
      continue-on-error: false
      if: ${{ success() && inputs.no-restore == true }}
      shell: bash
      working-directory: ${{ inputs.tests-path }}
      run: |
        for file in $(find . -name "*.csproj" -type f); do
          echo "Testing $file"
          dotnet test "$file" -c Release --no-restore -p:Exclude="${{ inputs.exclude-coverage }}" -p:CollectCoverage=true -p:CoverletOutputFormat="cobertura%2clcov" -p:SkipAutoProps=true --filter "${{ inputs.integration-test-filter }}" --logger "trx;LogFileName=test-results.trx"
        done

    - name: Run Integration And EndToEnd Tests
      continue-on-error: false
      if: ${{ success() && inputs.no-restore == false }}
      shell: bash
      working-directory: ${{ inputs.tests-path }}
      run: |
        for file in $(find . -name "*.csproj" -type f); do
          echo "Testing $file"
          dotnet test "$file" -c Release -p:Exclude="${{ inputs.exclude-coverage }}" -p:CollectCoverage=true -p:CoverletOutputFormat="cobertura%2clcov" -p:SkipAutoProps=true --filter "${{ inputs.integration-test-filter }}" --logger "trx;LogFileName=test-results.trx"
        done

    - name: Call Composite Action test-coverage
      uses: ./.github/actions/test-coverage
      id: test-coverage-step
      with:
        # wildcard search for files with the ".cobertura.xml" extension in all subdirectories of the current directory
        # https://www.jamescroft.co.uk/combining-multiple-code-coverage-results-in-azure-devops/
        # https://stackoverflow.com/questions/53255065/dotnet-unit-test-with-coverlet-how-to-get-coverage-for-entire-solution-and-not
        reports-path: ${{ inputs.reports-path }}
        reports-output-path: ${{ inputs.reports-output-path }}
        service-name: ${{ inputs.service-name }}
        token: ${{ inputs.token }}
